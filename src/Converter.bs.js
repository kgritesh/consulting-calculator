// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Models from "./Models.bs.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Belt_Map from "bs-platform/lib/es6/belt_Map.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ExchangeRates from "./ExchangeRates.bs.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

var days_in_year = 260;

var hours_in_year = (days_in_year << 3);

var supported_currency = [
  /* USD */0,
  /* INR */1
];

var NotFound = Caml_exceptions.create("Converter.NotFound");

function durationToString(dur) {
  switch (dur) {
    case /* Hourly */0 :
        return "Hourly";
    case /* Daily */1 :
        return "Daily";
    case /* Weekly */2 :
        return "Weekly";
    case /* Monthly */3 :
        return "Monthly";
    case /* Yearly */4 :
        return "Yearly";
    
  }
}

function durationFromString(dur) {
  switch (dur) {
    case "Daily" :
        return /* Daily */1;
    case "Hourly" :
        return /* Hourly */0;
    case "Monthly" :
        return /* Monthly */3;
    case "Weekly" :
        return /* Weekly */2;
    case "Yearly" :
        return /* Yearly */4;
    default:
      throw {
            RE_EXN_ID: NotFound,
            _1: "No matching duration found: " + dur,
            Error: new Error()
          };
  }
}

function currencyToString(cur) {
  if (cur) {
    return "INR";
  } else {
    return "USD";
  }
}

function currencyFromString(cur) {
  switch (cur) {
    case "INR" :
        return /* INR */1;
    case "USD" :
        return /* USD */0;
    default:
      throw {
            RE_EXN_ID: NotFound,
            _1: "No matching currency found: " + cur,
            Error: new Error()
          };
  }
}

function currencyToSymbol(cur) {
  if (cur) {
    return "â‚¹";
  } else {
    return "$";
  }
}

function converfromYearly(src, targetDuration) {
  var divider;
  switch (targetDuration) {
    case /* Hourly */0 :
        divider = hours_in_year;
        break;
    case /* Daily */1 :
        divider = days_in_year;
        break;
    case /* Weekly */2 :
        divider = 52;
        break;
    case /* Monthly */3 :
        divider = 12;
        break;
    case /* Yearly */4 :
        divider = 1;
        break;
    
  }
  return {
          value: src.value / divider,
          currency: src.currency,
          duration: targetDuration
        };
}

function convertToYearly(src) {
  var match = src.duration;
  var multiplier;
  switch (match) {
    case /* Hourly */0 :
        multiplier = hours_in_year;
        break;
    case /* Daily */1 :
        multiplier = days_in_year;
        break;
    case /* Weekly */2 :
        multiplier = 52;
        break;
    case /* Monthly */3 :
        multiplier = 12;
        break;
    case /* Yearly */4 :
        multiplier = 1;
        break;
    
  }
  return {
          value: src.value * multiplier,
          currency: src.currency,
          duration: /* Yearly */4
        };
}

function getCurrencyMap(rateMapping) {
  var currencyMap = Models.makeCurrencyMap(undefined);
  return Js_dict.entries(rateMapping).reduce((function (currencyMap, param) {
                var cur;
                try {
                  cur = currencyFromString(param[0]);
                }
                catch (exn){
                  return currencyMap;
                }
                return Belt_Map.set(currencyMap, cur, param[1]);
              }), currencyMap);
}

function fetchExchangeRates(srcCurrency, callback) {
  var curStr = srcCurrency ? "INR" : "USD";
  return ExchangeRates.$$fetch(curStr, (function (rates, error) {
                if (error !== undefined) {
                  return Curry._2(callback, Models.makeCurrencyMap(undefined), Caml_option.some(Caml_option.valFromOption(error)));
                } else {
                  return Curry._2(callback, getCurrencyMap(rates), undefined);
                }
              }));
}

function getExchangeRate(srcCurrency, targetCurrency, callback) {
  var currencyMap = Belt_Map.get(Models.currencyRate.contents, srcCurrency);
  if (currencyMap !== undefined) {
    var exchangeRate = Belt_Option.getExn(Belt_Map.get(Caml_option.valFromOption(currencyMap), targetCurrency));
    return Curry._2(callback, exchangeRate, undefined);
  }
  console.log("Currency Map doestn have " + (
        srcCurrency ? "INR" : "USD"
      ) + ", Fetching");
  return fetchExchangeRates(srcCurrency, (function (currencyMap, err) {
                if (err !== undefined) {
                  return Curry._2(callback, -1.0, Caml_option.some(Caml_option.valFromOption(err)));
                }
                Models.currencyRate.contents = Belt_Map.set(Models.currencyRate.contents, srcCurrency, currencyMap);
                var exchangeRate = Belt_Option.getExn(Belt_Map.get(currencyMap, targetCurrency));
                return Curry._2(callback, exchangeRate, undefined);
              }));
}

var months_in_year = 12;

var weeks_in_year = 52;

export {
  months_in_year ,
  weeks_in_year ,
  days_in_year ,
  hours_in_year ,
  supported_currency ,
  NotFound ,
  durationToString ,
  durationFromString ,
  currencyToString ,
  currencyFromString ,
  currencyToSymbol ,
  converfromYearly ,
  convertToYearly ,
  getCurrencyMap ,
  fetchExchangeRates ,
  getExchangeRate ,
  
}
/* Models Not a pure module */
