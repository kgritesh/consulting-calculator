// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Models from "./Models.bs.js";
import * as Converter from "./Converter.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";

function ConsultingRates(Props) {
  var rate = Props.rate;
  var match = React.useState(function () {
        return rate.currency;
      });
  var setTargetCurrency = match[1];
  var targetCurrency = match[0];
  var match$1 = React.useState(function () {
        return 1.00;
      });
  var setExchangeFactor = match$1[1];
  var exchangeFactor = match$1[0];
  var yearlyRate = Converter.convertToYearly(rate);
  React.useEffect((function () {
          Curry._1(setTargetCurrency, (function (_prev) {
                  return rate.currency;
                }));
          Curry._1(setExchangeFactor, (function (_prev) {
                  return 1.00;
                }));
          
        }), [rate]);
  var updateTargetCurrency = function ($$event) {
    var val = $$event.target.value;
    var target = Converter.currencyFromString(val);
    return Converter.getExchangeRate(yearlyRate.currency, target, (function (ex, error) {
                  if (error !== undefined) {
                    console.log("Unable to fetch exchange Rates", Caml_option.valFromOption(error));
                    return ;
                  } else {
                    Curry._1(setExchangeFactor, (function (_prev) {
                            return ex;
                          }));
                    return Curry._1(setTargetCurrency, (function (_prev) {
                                  return Converter.currencyFromString(val);
                                }));
                  }
                }));
  };
  var getRateForDuration = function (dur) {
    var durRate = Converter.converfromYearly(yearlyRate, dur);
    return durRate.value * exchangeFactor;
  };
  var formatAmount = (function(amount) {
      return amount.toLocaleString()
    });
  return React.createElement("div", {
              className: "md:col-span-1 h-full w-full"
            }, React.createElement("div", undefined, React.createElement("label", {
                      className: "block font-medium  text-gray-700"
                    }, "Currency"), React.createElement("select", {
                      className: "mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm \n                        focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 ",
                      id: "targetCurrency",
                      name: "targetCurrency",
                      value: Converter.currencyToString(targetCurrency),
                      onChange: updateTargetCurrency
                    }, Models.supportedCurrencies.map(function (cur) {
                          return React.createElement("option", {
                                      key: Converter.currencyToString(cur)
                                    }, Converter.currencyToString(cur));
                        }))), React.createElement(React.Fragment, {
                  children: Models.supportedDurations.filter(function (dur) {
                          return dur !== rate.duration;
                        }).map(function (dur) {
                        return React.createElement("div", {
                                    key: Converter.durationToString(dur),
                                    className: "mt-2"
                                  }, React.createElement("label", {
                                        className: "block font-medium text-gray-700"
                                      }, Converter.durationToString(dur) + " Rate"), React.createElement("div", {
                                        className: "mt-2 relative rounded-md shadow-sm"
                                      }, React.createElement("input", {
                                            key: Converter.durationToString(dur),
                                            className: "focus:ring-indigo-500 focus:border-indigo-500 block w-full pr-12 sm:text-sm border-gray-300 rounded-md",
                                            disabled: true,
                                            name: Converter.durationToString(dur),
                                            type: "text",
                                            value: formatAmount(getRateForDuration(dur))
                                          }), React.createElement("div", {
                                            className: "absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"
                                          }, React.createElement("span", {
                                                className: "text-gray-500 sm:text-sm"
                                              }, Converter.currencyToSymbol(targetCurrency)))));
                      })
                }));
}

var make = ConsultingRates;

export {
  make ,
  
}
/* react Not a pure module */
